From 09d31d0c436425dff3cc330f3a73ab36bdd81806 Mon Sep 17 00:00:00 2001
From: kojirou <kojirouhtc@gmail.com>
Date: Mon, 23 May 2022 02:33:36 +0800
Subject: [PATCH] presets and tunes

---
 source/common/param.cpp | 87 ++++++++++++++++++++++++++++++++++++++++-
 source/x265.h           |  4 +-
 source/x265cli.cpp      |  7 ++++
 3 files changed, 95 insertions(+), 3 deletions(-)

diff --git a/source/common/param.cpp b/source/common/param.cpp
index ed6973d9c..9fe96e691 100755
--- a/source/common/param.cpp
+++ b/source/common/param.cpp
@@ -570,6 +570,34 @@ int x265_param_default_preset(x265_param* param, const char* preset, const char*
             param->lookaheadSlices = 0; // disabled for best quality
             // TODO: optimized esa
         }
+        else if (!strncmp(preset, "flyabc", 6))
+        {
+            param->keyframeMin = 5;
+            param->scenecutThreshold = 50;
+            param->bOpenGOP = false;
+            param->lookaheadDepth = 60;
+            param->lookaheadSlices = 0;
+            param->searchMethod = X265_HEX_SEARCH;
+            param->subpelRefine = 2;
+            param->searchRange = 57;
+            param->maxNumReferences = 3;
+            param->maxNumMergeCand = 3;
+            param->bEnableStrongIntraSmoothing = false;
+            param->bEnableSAO = false;
+            param->selectiveSAO = false;
+            param->deblockingFilterTCOffset = -3;
+            param->deblockingFilterBetaOffset = -3;
+            param->bEnableLoopFilter = true;
+            param->maxCUSize = 32;
+            param->rdoqLevel = 2;
+            param->psyRdoq = 1.0;
+            param->recursionSkipMode = 2;
+
+            if (!strcmp(preset, "flyabc+"))
+            {
+                param->bEnableEarlySkip = 0;
+            }
+        }
         else
             return -1;
     }
@@ -625,12 +653,69 @@ int x265_param_default_preset(x265_param* param, const char* preset, const char*
         }
         else if (!strcmp(tune, "animation"))
         {
-            param->bframes = (param->bframes + 2) >= param->lookaheadDepth? param->bframes : param->bframes + 2;
+            if (param->bframes + 1 < param->lookaheadDepth) param->bframes++;
+            if (param->bframes + 1 < param->lookaheadDepth) param->bframes++;
             param->psyRd = 0.4;
             param->rc.aqStrength = 0.4;
             param->deblockingFilterBetaOffset = 1;
             param->deblockingFilterTCOffset = 1;
         }
+        else if (!strncmp(tune, "littlepox", 9) || !strncmp(tune, "vcb-s", 5)) {
+            param->searchRange = 25; //down from 57
+            param->bEnableAMP = 0;
+            param->bEnableRectInter = 0;
+            param->rc.aqStrength = 0.8; //down from 1.0
+            if (param->rdLevel < 4) param->rdLevel = 4;
+            param->rdoqLevel = 2; //force rdoq to be effective
+            param->bEnableSAO = 0;
+            param->bEnableStrongIntraSmoothing = 0;
+            if (param->bframes + 1 < param->lookaheadDepth) param->bframes++;
+            if (param->bframes + 1 < param->lookaheadDepth) param->bframes++; //from tune animation
+            if (param->tuQTMaxInterDepth > 3) param->tuQTMaxInterDepth--;
+            if (param->tuQTMaxIntraDepth > 3) param->tuQTMaxIntraDepth--;
+            if (param->maxNumMergeCand > 3) param->maxNumMergeCand--;
+            if (param->subpelRefine < 3) param->subpelRefine = 3;
+            param->keyframeMin = 1;
+            param->keyframeMax = 360;
+            param->bOpenGOP = 0;
+            param->deblockingFilterBetaOffset = -1;
+            param->deblockingFilterTCOffset = -1;
+            param->maxCUSize = 32;
+            param->maxTUSize = 32;
+            param->rc.qgSize = 8;
+            param->cbQpOffset = -2; //better chroma quality to compensate 420 subsampling
+            param->crQpOffset = -2; //better chroma quality to compensate 420 subsampling
+            param->rc.pbFactor = 1.2; //down from 1.3
+            param->bEnableWeightedBiPred = 1;
+            if (tune[0] == 'l') {
+                // Mid bitrate anime
+                param->rc.rfConstant = 20;
+                param->psyRd = 1.5; //down
+                param->psyRdoq = 0.8; //down
+
+                if (strstr(tune, "+")) {
+                    if (param->maxNumReferences < 2) param->maxNumReferences = 2;
+                    if (param->subpelRefine < 3) param->subpelRefine = 3;
+                    if (param->lookaheadDepth < 60) param->lookaheadDepth = 60;
+                    param->searchRange = 38; //down from 57
+                }
+            } else {
+                // High bitrate anime (bluray) or film
+                param->rc.rfConstant = 18;
+                param->psyRd = 1.8; //down
+                param->psyRdoq = 1.0; //same
+
+                if (strstr(tune, "+")) {
+                    if (param->maxNumReferences < 3) param->maxNumReferences = 3;
+                    if (param->subpelRefine < 3) param->subpelRefine = 3;
+                    param->bIntraInBFrames = 1;
+                    param->bEnableRectInter = 1;
+                    param->limitTU = 4;
+                    if (param->lookaheadDepth < 60) param->lookaheadDepth = 60;
+                    param->searchRange = 38; //down from 57
+                }
+            }
+         }
         else if (!strcmp(tune, "vmaf"))  /*Adding vmaf for x265 + SVT-HEVC integration support*/
         {
             /*vmaf is under development, currently x265 won't support vmaf*/
diff --git a/source/x265.h b/source/x265.h
index 5d242d653..bd4f0e068 100644
--- a/source/x265.h
+++ b/source/x265.h
@@ -2060,7 +2060,7 @@ int x265_param_apply_profile(x265_param *, const char *profile);
  *      (either can be NULL, which implies no preset or no tune, respectively)
  *
  *      Currently available presets are, ordered from fastest to slowest: */
-static const char * const x265_preset_names[] = { "ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow", "placebo", 0 };
+static const char * const x265_preset_names[] = { "ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow", "placebo", "flyabc", "flyabc+", 0 };
 
 /*      The presets can also be indexed numerically, as in:
  *      x265_param_default_preset( &param, "3", ... )
@@ -2072,7 +2072,7 @@ static const char * const x265_preset_names[] = { "ultrafast", "superfast", "ver
  *      100 times faster than placebo!
  *
  *      Currently available tunings are: */
-static const char * const x265_tune_names[] = { "psnr", "ssim", "grain", "zerolatency", "fastdecode", "animation", 0 };
+static const char * const x265_tune_names[] = { "psnr", "ssim", "grain", "zerolatency", "fastdecode", "animation", "littlepox", "littlepox+", "vcb-s", "vcb-s+", 0 };
 
 /*      returns 0 on success, negative on failure (e.g. invalid preset/tune name). */
 int x265_param_default_preset(x265_param *, const char *preset, const char *tune);
diff --git a/source/x265cli.cpp b/source/x265cli.cpp
index eb5422d49..672af2130 100755
--- a/source/x265cli.cpp
+++ b/source/x265cli.cpp
@@ -109,7 +109,10 @@ namespace X265_NS {
         H0("\nPresets:\n");
         H0("-p/--preset <string>             Trade off performance for compression efficiency. Default medium\n");
         H0("                                 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow, or placebo\n");
+        H0("           (good for everything) flyabc, (slower) flyabc+\n");
         H0("-t/--tune <string>               Tune the settings for a particular type of source or situation:\n");
+        H0("             (mid bitrate anime) littlepox, (slower) littlepox+\n");
+        H0("  (high bitrate anime BD / film) vcb-s,   (slower) vcb-s+\n");
         H0("                                 psnr, ssim, grain, zerolatency, fastdecode\n");
         H0("\nQuad-Tree size and depth:\n");
         H0("-s/--ctu <64|32|16>              Maximum CU size (WxH). Default %d\n", param->maxCUSize);
@@ -899,6 +902,10 @@ namespace X265_NS {
 
         this->input->startReader();
 
+        if (!preset) preset = "medium";
+        if (!tune) tune = "none";
+        x265_log(param, X265_LOG_INFO, "Using preset %s & tune %s\n", preset, tune);
+
         if (reconfn)
         {
             if (reconFileBitDepth == 0)
-- 
2.32.1 (Apple Git-133)

